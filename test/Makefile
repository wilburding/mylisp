# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = $(GTEST_ROOT)

# Where to find user code.
USER_DIR = ../mylisp


CC = clang++
CXX = clang++
LD = clang++

# Flags passed to the preprocessor.
CPPFLAGS += -I../mylisp -I$(GTEST_DIR)/include -I$(BOOST_HOME) -DGTEST_HAS_TR1_TUPLE=0

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -std=c++11 -stdlib=libc++

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = all_unittest \
		object_unittest \
		list_unittest \
		environment_unittest \
		symbols_unittest \
		eval_unittest \
		lambda_unittest \

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -Wno-unused-private-field \
		-Wno-missing-field-initializers -c $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

object.o : $(USER_DIR)/object.cpp $(USER_DIR)/object.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/object.cpp

exception.o : $(USER_DIR)/exception.cpp $(USER_DIR)/exception.h $(USER_DIR)/object.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/exception.cpp

list.o : $(USER_DIR)/list.cpp $(USER_DIR)/list.h $(USER_DIR)/object.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/list.cpp

environment.o : $(USER_DIR)/environment.cpp $(USER_DIR)/environment.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/environment.cpp

symbols.o : $(USER_DIR)/symbols.cpp $(USER_DIR)/symbols.h $(USER_DIR)/util.h \
	$(USER_DIR)/environment.h $(USER_DIR)/object.h $(USER_DIR)/exception.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/symbols.cpp

eval.o : $(USER_DIR)/eval.cpp $(USER_DIR)/eval.h $(USER_DIR)/mylisp.h \
	$(USER_DIR)/symbols.h $(USER_DIR)/object.h $(USER_DIR)/list.h $(USER_DIR)/exception.h \
	$(USER_DIR)/environment.h $(USER_DIR)/lambda.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/eval.cpp

lambda.o : $(USER_DIR)/lambda.cpp $(USER_DIR)/lambda.h $(USER_DIR)/list.h\
	$(USER_DIR)/environment.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/lambda.cpp


object_unittest.o : object_unittest.cpp \
	$(USER_DIR)/object.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c object_unittest.cpp

list_unittest.o : list_unittest.cpp $(USER_DIR)/list.h $(USER_DIR)/object.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c list_unittest.cpp

list_eval.o : list_eval.cpp $(USER_DIR)/list.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c list_eval.cpp

environment_unittest.o : environment_unittest.cpp \
	$(USER_DIR)/environment.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c environment_unittest.cpp

symbols_unittest.o : symbols_unittest.cpp $(USER_DIR)/symbols.h $(USER_DIR)/object.h \
	$(USER_DIR)/util.h $(USER_DIR)/environment.h $(USER_DIR)/exception.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c symbols_unittest.cpp

eval_unittest.o : eval_unittest.cpp $(USER_DIR)/eval.h $(USER_DIR)/mylisp.h \
	$(USER_DIR)/symbols.h $(USER_DIR)/object.h $(USER_DIR)/list.h $(USER_DIR)/exception.h \
	$(USER_DIR)/environment.h $(USER_DIR)/lambda.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c eval_unittest.cpp

lambda_unittest.o : lambda_unittest.cpp $(USER_DIR)/lambda.h $(USER_DIR)/object.h \
	$(USER_DIR)/environment.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c lambda_unittest.cpp


object_unittest : object.o object_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

list_unittest : list.o object.o exception.o list_unittest.o list_eval.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

environment_unittest : environment.o object.o environment_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

symbols_unittest : symbols.o environment.o object.o exception.o symbols_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

eval_unittest: eval_unittest.o eval.o symbols.o object.o list.o \
	exception.o environment.o lambda.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

lambda_unittest : lambda.o object.o environment.o lambda_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

all_unittest: environment.o environment_unittest.o eval.o eval_unittest.o \
	exception.o lambda.o lambda_unittest.o list.o list_unittest.o \
	object.o object_unittest.o symbols.o symbols_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
